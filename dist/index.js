"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _express = _interopRequireDefault(require("express"));
var _bodyParser = _interopRequireDefault(require("body-parser"));
var _dotenv = _interopRequireDefault(require("dotenv"));
var _passport = _interopRequireDefault(require("passport"));
var _expressSession = _interopRequireDefault(require("express-session"));
var _cors = _interopRequireDefault(require("cors"));
var _dbConfig = _interopRequireDefault(require("./config/db.config.js"));
var _index = _interopRequireDefault(require("./routers/index.js"));
var _expressFileupload = _interopRequireDefault(require("express-fileupload"));
var _googleAuth = _interopRequireDefault(require("./routers/googleAuth.js"));
var _corsOptions = require("./utils/corsOptions.js");
_dotenv["default"].config();
var app = (0, _express["default"])();
(0, _dbConfig["default"])();
app.use((0, _cors["default"])(_corsOptions.corsOptions));
app.use(_bodyParser["default"].urlencoded({
  extended: false
}));
app.use(_express["default"].json());
app.use((0, _expressFileupload["default"])({
  useTempFiles: true
}));
app.use((0, _expressSession["default"])({
  secret: "anywantedkeyyyy",
  resave: false,
  saveUninitialized: true,
  cookie: {
    secure: false
  }
}));
app.use(_passport["default"].initialize());
app.use(_passport["default"].session());

// Routes
app.get("/", function (req, res) {
  res.status(200).json({
    message: "let's get started ",
    status: 200
  });
});
app.use("/api/v1", _index["default"]);
app.use(_googleAuth["default"]);
app.use(function (req, res) {
  res.status(404).json({
    message: "endpoint not found",
    status: 404
  });
});
var _default = app;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2JvZHlQYXJzZXIiLCJfZG90ZW52IiwiX3Bhc3Nwb3J0IiwiX2V4cHJlc3NTZXNzaW9uIiwiX2NvcnMiLCJfZGJDb25maWciLCJfaW5kZXgiLCJfZXhwcmVzc0ZpbGV1cGxvYWQiLCJfZ29vZ2xlQXV0aCIsIl9jb3JzT3B0aW9ucyIsImRvdGVudiIsImNvbmZpZyIsImFwcCIsImV4cHJlc3MiLCJtb25nb0Nvbm5lY3QiLCJ1c2UiLCJjb3JzIiwiY29yc09wdGlvbnMiLCJib2R5UGFyc2VyIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwianNvbiIsImZpbGVVcGxvYWRlciIsInVzZVRlbXBGaWxlcyIsInNlc3Npb24iLCJzZWNyZXQiLCJyZXNhdmUiLCJzYXZlVW5pbml0aWFsaXplZCIsImNvb2tpZSIsInNlY3VyZSIsInBhc3Nwb3J0IiwiaW5pdGlhbGl6ZSIsImdldCIsInJlcSIsInJlcyIsInN0YXR1cyIsIm1lc3NhZ2UiLCJyb3V0ZXIiLCJnb29nbGVSb3V0ZSIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcyBmcm9tIFwiZXhwcmVzc1wiO1xuaW1wb3J0IGJvZHlQYXJzZXIgZnJvbSBcImJvZHktcGFyc2VyXCI7XG5pbXBvcnQgZG90ZW52IGZyb20gXCJkb3RlbnZcIjtcbmltcG9ydCBwYXNzcG9ydCBmcm9tIFwicGFzc3BvcnRcIjtcbmltcG9ydCBzZXNzaW9uIGZyb20gXCJleHByZXNzLXNlc3Npb25cIjtcblxuaW1wb3J0IGNvcnMgZnJvbSBcImNvcnNcIjtcbmltcG9ydCBtb25nb0Nvbm5lY3QgZnJvbSBcIi4vY29uZmlnL2RiLmNvbmZpZy5qc1wiO1xuaW1wb3J0IHJvdXRlciBmcm9tIFwiLi9yb3V0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgZmlsZVVwbG9hZGVyIGZyb20gXCJleHByZXNzLWZpbGV1cGxvYWRcIjtcbmltcG9ydCBnb29nbGVSb3V0ZSBmcm9tIFwiLi9yb3V0ZXJzL2dvb2dsZUF1dGguanNcIjtcbmltcG9ydCB7IGNvcnNPcHRpb25zIH0gZnJvbSBcIi4vdXRpbHMvY29yc09wdGlvbnMuanNcIjtcblxuZG90ZW52LmNvbmZpZygpO1xuY29uc3QgYXBwID0gZXhwcmVzcygpO1xubW9uZ29Db25uZWN0KCk7XG5hcHAudXNlKGNvcnMoY29yc09wdGlvbnMpKTtcbmFwcC51c2UoYm9keVBhcnNlci51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IGZhbHNlIH0pKTtcbmFwcC51c2UoZXhwcmVzcy5qc29uKCkpO1xuYXBwLnVzZShmaWxlVXBsb2FkZXIoeyB1c2VUZW1wRmlsZXM6IHRydWUgfSkpO1xuXG5hcHAudXNlKFxuICBzZXNzaW9uKHtcbiAgICBzZWNyZXQ6IFwiYW55d2FudGVka2V5eXl5XCIsXG4gICAgcmVzYXZlOiBmYWxzZSxcbiAgICBzYXZlVW5pbml0aWFsaXplZDogdHJ1ZSxcbiAgICBjb29raWU6IHsgc2VjdXJlOiBmYWxzZSB9LFxuICB9KVxuKTtcbmFwcC51c2UocGFzc3BvcnQuaW5pdGlhbGl6ZSgpKTtcbmFwcC51c2UocGFzc3BvcnQuc2Vzc2lvbigpKTtcblxuXG4vLyBSb3V0ZXNcbmFwcC5nZXQoXCIvXCIsIChyZXEsIHJlcykgPT4ge1xuICByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgbWVzc2FnZTogXCJsZXQncyBnZXQgc3RhcnRlZCBcIixcbiAgICBzdGF0dXM6IDIwMCxcbiAgfSk7XG59KTtcblxuYXBwLnVzZShcIi9hcGkvdjFcIiwgcm91dGVyKTtcbmFwcC51c2UoZ29vZ2xlUm91dGUpXG5cbmFwcC51c2UoKHJlcSwgcmVzKSA9PiB7XG4gIHJlcy5zdGF0dXMoNDA0KS5qc29uKHtcbiAgICBtZXNzYWdlOiBcImVuZHBvaW50IG5vdCBmb3VuZFwiLFxuICAgIHN0YXR1czogNDA0LFxuICB9KTtcbn0pO1xuXG5leHBv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