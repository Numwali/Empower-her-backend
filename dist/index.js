"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _express = _interopRequireDefault(require("express"));
var _bodyParser = _interopRequireDefault(require("body-parser"));
var _dotenv = _interopRequireDefault(require("dotenv"));
var _passport = _interopRequireDefault(require("passport"));
var _expressSession = _interopRequireDefault(require("express-session"));
var _cors = _interopRequireDefault(require("cors"));
var _dbConfig = _interopRequireDefault(require("./config/db.config.js"));
var _index = _interopRequireDefault(require("./routers/index.js"));
var _expressFileupload = _interopRequireDefault(require("express-fileupload"));
var _googleAuth = _interopRequireDefault(require("./routers/googleAuth.js"));
var _corsOptions = require("./utils/corsOptions.js");
_dotenv["default"].config();
var app = (0, _express["default"])();
(0, _dbConfig["default"])();
app.use((0, _cors["default"])());
app.use(_bodyParser["default"].urlencoded({
  extended: false
}));
app.use(_express["default"].json());
app.use((0, _expressFileupload["default"])({
  useTempFiles: true
}));
app.use((0, _expressSession["default"])({
  secret: "anywantedkeyyyy",
  resave: false,
  saveUninitialized: true,
  cookie: {
    secure: false
  }
}));
app.use(_passport["default"].initialize());
app.use(_passport["default"].session());

// Routes
app.get("/", function (req, res) {
  res.status(200).json({
    message: "let's get started ",
    status: 200
  });
});
app.use("/api/v1", _index["default"]);
app.use(_googleAuth["default"]);
app.use(function (req, res) {
  res.status(404).json({
    message: "endpoint not found",
    status: 404
  });
});
var _default = app;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2JvZHlQYXJzZXIiLCJfZG90ZW52IiwiX3Bhc3Nwb3J0IiwiX2V4cHJlc3NTZXNzaW9uIiwiX2NvcnMiLCJfZGJDb25maWciLCJfaW5kZXgiLCJfZXhwcmVzc0ZpbGV1cGxvYWQiLCJfZ29vZ2xlQXV0aCIsIl9jb3JzT3B0aW9ucyIsImRvdGVudiIsImNvbmZpZyIsImFwcCIsImV4cHJlc3MiLCJtb25nb0Nvbm5lY3QiLCJ1c2UiLCJjb3JzIiwiYm9keVBhcnNlciIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsImpzb24iLCJmaWxlVXBsb2FkZXIiLCJ1c2VUZW1wRmlsZXMiLCJzZXNzaW9uIiwic2VjcmV0IiwicmVzYXZlIiwic2F2ZVVuaW5pdGlhbGl6ZWQiLCJjb29raWUiLCJzZWN1cmUiLCJwYXNzcG9ydCIsImluaXRpYWxpemUiLCJnZXQiLCJyZXEiLCJyZXMiLCJzdGF0dXMiLCJtZXNzYWdlIiwicm91dGVyIiwiZ29vZ2xlUm91dGUiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcbmltcG9ydCBib2R5UGFyc2VyIGZyb20gXCJib2R5LXBhcnNlclwiO1xuaW1wb3J0IGRvdGVudiBmcm9tIFwiZG90ZW52XCI7XG5pbXBvcnQgcGFzc3BvcnQgZnJvbSBcInBhc3Nwb3J0XCI7XG5pbXBvcnQgc2Vzc2lvbiBmcm9tIFwiZXhwcmVzcy1zZXNzaW9uXCI7XG5cbmltcG9ydCBjb3JzIGZyb20gXCJjb3JzXCI7XG5pbXBvcnQgbW9uZ29Db25uZWN0IGZyb20gXCIuL2NvbmZpZy9kYi5jb25maWcuanNcIjtcbmltcG9ydCByb3V0ZXIgZnJvbSBcIi4vcm91dGVycy9pbmRleC5qc1wiO1xuaW1wb3J0IGZpbGVVcGxvYWRlciBmcm9tIFwiZXhwcmVzcy1maWxldXBsb2FkXCI7XG5pbXBvcnQgZ29vZ2xlUm91dGUgZnJvbSBcIi4vcm91dGVycy9nb29nbGVBdXRoLmpzXCI7XG5pbXBvcnQgeyBjb3JzT3B0aW9ucyB9IGZyb20gXCIuL3V0aWxzL2NvcnNPcHRpb25zLmpzXCI7XG5cbmRvdGVudi5jb25maWcoKTtcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbm1vbmdvQ29ubmVjdCgpO1xuYXBwLnVzZShjb3JzKCkpO1xuYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyBleHRlbmRlZDogZmFsc2UgfSkpO1xuYXBwLnVzZShleHByZXNzLmpzb24oKSk7XG5hcHAudXNlKGZpbGVVcGxvYWRlcih7IHVzZVRlbXBGaWxlczogdHJ1ZSB9KSk7XG5cbmFwcC51c2UoXG4gIHNlc3Npb24oe1xuICAgIHNlY3JldDogXCJhbnl3YW50ZWRrZXl5eXlcIixcbiAgICByZXNhdmU6IGZhbHNlLFxuICAgIHNhdmVVbmluaXRpYWxpemVkOiB0cnVlLFxuICAgIGNvb2tpZTogeyBzZWN1cmU6IGZhbHNlIH0sXG4gIH0pXG4pO1xuYXBwLnVzZShwYXNzcG9ydC5pbml0aWFsaXplKCkpO1xuYXBwLnVzZShwYXNzcG9ydC5zZXNzaW9uKCkpO1xuXG5cbi8vIFJvdXRlc1xuYXBwLmdldChcIi9cIiwgKHJlcSwgcmVzKSA9PiB7XG4gIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcbiAgICBtZXNzYWdlOiBcImxldCdzIGdldCBzdGFydGVkIFwiLFxuICAgIHN0YXR1czogMjAwLFxuICB9KTtcbn0pO1xuXG5hcHAudXNlKFwiL2FwaS92MVwiLCByb3V0ZXIpO1xuYXBwLnVzZShnb29nbGVSb3V0ZSlcblxuYXBwLnVzZSgocmVxLCByZXMpID0+IHtcbiAgcmVzLnN0YXR1cyg0MDQpLmpzb24oe1xuICAgIG1lc3NhZ2U6IFwiZW5kcG9pbnQgbm90IGZvdW5kXCIsXG4gICAgc3RhdHVzOiA0MDQsXG4gIH0pO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGFwcDtcbiJdLCJtYXBw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