"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _mongoose = _interopRequireDefault(require("mongoose"));
var schema = _mongoose["default"].Schema({
  user: {
    type: _mongoose["default"].Schema.Types.ObjectId,
    ref: "User"
  },
  content: {
    type: String,
    required: [true, "Please add a lastname"]
  },
  image: {
    type: String
  },
  video: {
    type: String
  },
  postedDate: {
    type: String,
    required: true,
    "default": new Date()
  },
  whoCanReplay: {
    type: String
  },
  type: {
    type: String,
    "enum": ["blog", "community"]
  },
  likes: [{
    user: {
      type: _mongoose["default"].Schema.Types.ObjectId,
      required: true,
      ref: "User"
    },
    likedDate: {
      type: String,
      required: true,
      "default": new Date()
    }
  }],
  comments: [{
    user: {
      type: _mongoose["default"].Schema.Types.ObjectId,
      required: true,
      ref: "User"
    },
    comment: {
      type: String,
      required: [true, "Please add a comment"]
    },
    postedDate: {
      type: String,
      required: true,
      "default": new Date()
    },
    replies: [{
      user: {
        type: _mongoose["default"].Schema.Types.ObjectId,
        required: true,
        ref: "User"
      },
      reply: {
        type: String,
        required: [true, "Please add a reply"]
      },
      postedDate: {
        type: String,
        required: true,
        "default": new Date()
      }
    }]
  }]
});
var _default = _mongoose["default"].model("Post", schema);
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbW9uZ29vc2UiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsInNjaGVtYSIsIm1vbmdvb3NlIiwiU2NoZW1hIiwidXNlciIsInR5cGUiLCJUeXBlcyIsIk9iamVjdElkIiwicmVmIiwiY29udGVudCIsIlN0cmluZyIsInJlcXVpcmVkIiwiaW1hZ2UiLCJ2aWRlbyIsInBvc3RlZERhdGUiLCJEYXRlIiwid2hvQ2FuUmVwbGF5IiwibGlrZXMiLCJsaWtlZERhdGUiLCJjb21tZW50cyIsImNvbW1lbnQiLCJyZXBsaWVzIiwicmVwbHkiLCJfZGVmYXVsdCIsIm1vZGVsIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbHMvcG9zdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9uZ29vc2UgZnJvbSBcIm1vbmdvb3NlXCI7XG5cbmNvbnN0IHNjaGVtYSA9IG1vbmdvb3NlLlNjaGVtYSh7XG4gIHVzZXI6IHtcbiAgICB0eXBlOiBtb25nb29zZS5TY2hlbWEuVHlwZXMuT2JqZWN0SWQsXG4gICAgcmVmOiBcIlVzZXJcIixcbiAgfSxcbiAgY29udGVudDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICByZXF1aXJlZDogW3RydWUsIFwiUGxlYXNlIGFkZCBhIGxhc3RuYW1lXCJdLFxuICB9LFxuICBpbWFnZToge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgfSxcbiAgdmlkZW86IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gIH0sXG4gIHBvc3RlZERhdGU6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgZGVmYXVsdDogbmV3IERhdGUoKSxcbiAgfSxcbiAgd2hvQ2FuUmVwbGF5OiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICB9LFxuICB0eXBlOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGVudW06IFtcImJsb2dcIiwgXCJjb21tdW5pdHlcIl0sXG4gIH0sXG4gIGxpa2VzOiBbXG4gICAge1xuICAgICAgdXNlcjoge1xuICAgICAgICB0eXBlOiBtb25nb29zZS5TY2hlbWEuVHlwZXMuT2JqZWN0SWQsXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICByZWY6IFwiVXNlclwiLFxuICAgICAgfSxcbiAgICAgIGxpa2VkRGF0ZToge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICBkZWZhdWx0OiBuZXcgRGF0ZSgpLFxuICAgICAgfSxcbiAgICB9LFxuICBdLFxuICBjb21tZW50czogW1xuICAgIHtcbiAgICAgIHVzZXI6IHtcbiAgICAgICAgdHlwZTogbW9uZ29vc2UuU2NoZW1hLlR5cGVzLk9iamVjdElkLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgcmVmOiBcIlVzZXJcIixcbiAgICAgIH0sXG4gICAgICBjb21tZW50OiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgcmVxdWlyZWQ6IFt0cnVlLCBcIlBsZWFzZSBhZGQgYSBjb21tZW50XCJdLFxuICAgICAgfSxcbiAgICAgIHBvc3RlZERhdGU6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgZGVmYXVsdDogbmV3IERhdGUoKSxcbiAgICAgIH0sXG4gICAgICByZXBsaWVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB1c2VyOiB7XG4gICAgICAgICAgICB0eXBlOiBtb25nb29zZS5TY2hlbWEuVHlwZXMuT2JqZWN0SWQsXG4gICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgIHJlZjogXCJVc2VyXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICByZXBseToge1xuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICAgICAgcmVxdWlyZWQ6IFt0cnVlLCBcIlBsZWFzZSBhZGQgYSByZXBseVwiXSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHBvc3RlZERhdGU6IHtcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgZGVmYXVsdDogbmV3IERhdGUoKSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9LFxuICBdLFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG1vbmdvb3NlLm1vZGVsKFwiUG9zdFwiLCBzY2hlbWEpO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQUEsU0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBTUMsTUFBTSxHQUFHQyxvQkFBUSxDQUFDQyxNQUFNLENBQUM7RUFDN0JDLElBQUksRUFBRTtJQUNKQyxJQUFJLEVBQUVILG9CQUFRLENBQUNDLE1BQU0sQ0FBQ0csS0FBSyxDQUFDQyxRQUFRO0lBQ3BDQyxHQUFHLEVBQUU7RUFDUCxDQUFDO0VBQ0RDLE9BQU8sRUFBRTtJQUNQSixJQUFJLEVBQUVLLE1BQU07SUFDWkMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLHVCQUF1QjtFQUMxQyxDQUFDO0VBQ0RDLEtBQUssRUFBRTtJQUNMUCxJQUFJLEVBQUVLO0VBQ1IsQ0FBQztFQUNERyxLQUFLLEVBQUU7SUFDTFIsSUFBSSxFQUFFSztFQUNSLENBQUM7RUFDREksVUFBVSxFQUFFO0lBQ1ZULElBQUksRUFBRUssTUFBTTtJQUNaQyxRQUFRLEVBQUUsSUFBSTtJQUNkLFdBQVMsSUFBSUksSUFBSSxDQUFDO0VBQ3BCLENBQUM7RUFDREMsWUFBWSxFQUFFO0lBQ1pYLElBQUksRUFBRUs7RUFDUixDQUFDO0VBQ0RMLElBQUksRUFBRTtJQUNKQSxJQUFJLEVBQUVLLE1BQU07SUFDWixRQUFNLENBQUMsTUFBTSxFQUFFLFdBQVc7RUFDNUIsQ0FBQztFQUNETyxLQUFLLEVBQUUsQ0FDTDtJQUNFYixJQUFJLEVBQUU7TUFDSkMsSUFBSSxFQUFFSCxvQkFBUSxDQUFDQyxNQUFNLENBQUNHLEtBQUssQ0FBQ0MsUUFBUTtNQUNwQ0ksUUFBUSxFQUFFLElBQUk7TUFDZEgsR0FBRyxFQUFFO0lBQ1AsQ0FBQztJQUNEVSxTQUFTLEVBQUU7TUFDVGIsSUFBSSxFQUFFSyxNQUFNO01BQ1pDLFFBQVEsRUFBRSxJQUFJO01BQ2QsV0FBUyxJQUFJSSxJQUFJLENBQUM7SUFDcEI7RUFDRixDQUFDLENBQ0Y7RUFDREksUUFBUSxFQUFFLENBQ1I7SUFDRWYsSUFBSSxFQUFFO01BQ0pDLElBQUksRUFBRUgsb0JBQVEsQ0FBQ0MsTUFBTSxDQUFDRyxLQUFLLENBQUNDLFFBQVE7TUFDcENJLFFBQVEsRUFBRSxJQUFJO01BQ2RILEdBQUcsRUFBRTtJQUNQLENBQUM7SUFDRFksT0FBTyxFQUFFO01BQ1BmLElBQUksRUFBRUssTUFBTTtNQUNaQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLEVBQUUsc0JBQXNCO0lBQ3pDLENBQUM7SUFDREcsVUFBVSxFQUFFO01BQ1ZULElBQUksRUFBRUssTUFBTTtNQUNaQyxRQUFRLEVBQUUsSUFBSTtNQUNkLFdBQVMsSUFBSUksSUFBSSxDQUFDO0lBQ3BCLENBQUM7SUFDRE0sT0FBTyxFQUFFLENBQ1A7TUFDRWpCLElBQUksRUFBRTtRQUNKQyxJQUFJLEVBQUVILG9CQUFRLENBQUNDLE1BQU0sQ0FBQ0csS0FBSyxDQUFDQyxRQUFRO1FBQ3BDSSxRQUFRLEVBQUUsSUFBSTtRQUNkSCxHQUFHLEVBQUU7TUFDUCxDQUFDO01BQ0RjLEtBQUssRUFBRTtRQUNMakIsSUFBSSxFQUFFSyxNQUFNO1FBQ1pDLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxvQkFBb0I7TUFDdkMsQ0FBQztNQUNERyxVQUFVLEVBQUU7UUFDVlQsSUFBSSxFQUFFSyxNQUFNO1FBQ1pDLFFBQVEsRUFBRSxJQUFJO1FBQ2QsV0FBUyxJQUFJSSxJQUFJLENBQUM7TUFDcEI7SUFDRixDQUFDO0VBRUwsQ0FBQztBQUVMLENBQUMsQ0FBQztBQUFDLElBQUFRLFFBQUEsR0FFWXJCLG9CQUFRLENBQUNzQixLQUFLLENBQUMsTUFBTSxFQUFFdkIsTUFBTSxDQUFDO0FBQUF3QixPQUFBLGNBQUFGLFFBQUEifQ==